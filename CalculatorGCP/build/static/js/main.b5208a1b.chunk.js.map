{"version":3,"sources":["Components/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["Calculator","useState","result","setResult","result1","setResult1","inputRef","useRef","tempo","handleClick","e","target","value","concat","handleChange","clear","calculate","eval","toString","error","className","type","ref","onChange","placeholder","onClick","id","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"yqBAGA,SAASA,aAAa,cACUC,oDAAS,IADnB,4LACXC,OADW,cACHC,UADG,yBAEYF,oDAAS,IAFrB,6LAEXG,QAFW,cAEFC,WAFE,cAGZC,SAAWC,kDAAO,GACpBC,MAEJ,SAASC,YAAYC,GACnBF,MAAME,EAAEC,OAAOC,MACfT,UAAUD,OAAOW,OAAOL,QAG1B,SAASM,aAAaJ,GACpBP,UAAU,CAACS,MAAOF,EAAEC,OAAOC,QAG7B,SAASG,QACLZ,UAAU,IAGd,SAASa,YACL,IACEb,UAAUc,KAAKf,QAAQgB,YACtB,MAAOC,OACRhB,UAAU,UAGhB,OACE,kEAAKiB,UAAU,cACT,kEAAMA,UAAU,cACd,oEAAOC,KAAK,OAASD,UAAU,SAAWR,MAAOV,OAAQoB,IAAKhB,SAAUiB,SAAUT,aAAcU,YAAY,OAG9G,kEAAKJ,UAAU,QACb,qEAAQR,MAAM,IAAIa,QAAShB,YAAaY,KAAK,SAASD,UAAU,iBAAhE,KACA,qEAAQR,MAAM,IAAIa,QAAShB,YAAaY,KAAK,SAASD,UAAU,iBAAhE,KACA,qEAAQR,MAAM,IAAIa,QAAShB,YAAaY,KAAK,SAASD,UAAU,iBAAhE,QACA,qEAAQR,MAAM,IAAIa,QAAShB,YAAaY,KAAK,SAASD,UAAU,iBAAhE,QAEA,qEAAQR,MAAM,IAAIa,QAAShB,YAAaY,KAAK,SAASD,UAAU,iBAAhE,KACA,qEAAQR,MAAM,IAAIa,QAAShB,YAAaY,KAAK,SAASD,UAAU,iBAAhE,KACA,qEAAQR,MAAM,IAAIa,QAAShB,YAAaY,KAAK,SAASD,UAAU,iBAAhE,KACA,qEAAQR,MAAM,IAAIa,QAAShB,YAAaY,KAAK,SAASD,UAAU,iBAAhE,KACA,qEAAQR,MAAM,IAAIa,QAAShB,YAAaY,KAAK,SAASD,UAAU,iBAAhE,KACA,qEAAQR,MAAM,IAAIa,QAAShB,YAAaY,KAAK,SAASD,UAAU,iBAAhE,KACA,qEAAQR,MAAM,IAAIa,QAAShB,YAAaY,KAAK,SAASD,UAAU,iBAAhE,KACA,qEAAQR,MAAM,IAAIa,QAAShB,YAAaY,KAAK,SAASD,UAAU,iBAAhE,KACA,qEAAQR,MAAM,IAAIa,QAAShB,YAAaY,KAAK,SAASD,UAAU,iBAAhE,KACA,qEAAQR,MAAM,IAAIa,QAAShB,YAAaY,KAAK,SAASD,UAAU,iBAAhE,KACA,qEAAQR,MAAM,IAAIa,QAAShB,YAAaY,KAAK,SAASD,UAAU,iBAAhE,KAEA,qEAASM,GAAG,QAAQD,QAASV,MAAOM,KAAK,SAASD,UAAU,yBAA5D,MACA,qEAAQM,GAAG,SAASD,QAAST,UAAWK,KAAK,SAASD,UAAU,kCAAhE,OAKGpB,kC,yLC/CF2B,MARf,WAEE,OACE,yBAAKP,UAAU,kBAAf,IACE,kBAACpB,EAAA,EAAD,QCIc4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAzB,GACL0B,QAAQ1B,MAAMA,EAAM2B,c","file":"static/js/main.b5208a1b.chunk.js","sourcesContent":["import React, {useState, useRef} from \"react\";//import vars of hook\nimport \"./Calculator.css\";//import css\n\nfunction Calculator() {//function Principal\n    const [result, setResult] = useState(\"\");// def vars state \n    const [result1, setResult1] = useState(\"\");\n    const inputRef = useRef(0);\n    var tempo;\n\n    function handleClick(e) {// function for handle click in botton of calculator\n      tempo=e.target.value; //this value take of botton selected\n      setResult(result.concat(tempo)); //concate var \"tempo\" & \"result\"\n    }    \n\n    function handleChange(e) {//handle change state of input\n      setResult({value: e.target.value});\n    }\n    \n    function clear() {//function for clear valors in calculator\n        setResult(\"\");  //clear and set valor in zero\n      }\n\n    function calculate() {// function for calculate the valor in screen of calculator\n        try { // structure try-Catch for control of errors\n          setResult(eval(result).toString()); // transformate the valor in screen string  to numbers and resolve the expresion\n         } catch (error) {\n          setResult(\"Error\"); // if error\n        }\n      }\n    return ( /*return this value*/\n      <div className=\"calculator\">\n            <div  className=\"calculator\">{/*screen of calculator  */}\n              <input type=\"text\"   className=\"screen\"   value={result} ref={inputRef} onChange={handleChange} placeholder='0'/>\n            </div>\n             \n            <div className=\"keys\">{/*bottons calculator*/}\n              <button value=\"+\" onClick={handleClick} type=\"button\" className=\"btn btn-light\">+</button>\n              <button value=\"-\" onClick={handleClick} type=\"button\" className=\"btn btn-light\">-</button>   \n              <button value=\"*\" onClick={handleClick} type=\"button\" className=\"btn btn-light\">&times;</button>        \n              <button value=\"/\" onClick={handleClick} type=\"button\" className=\"btn btn-light\">&divide;</button>        \n              \n              <button value=\"7\" onClick={handleClick} type=\"button\" className=\"btn btn-light\">7</button>\n              <button value=\"8\" onClick={handleClick} type=\"button\" className=\"btn btn-light\">8</button>\n              <button value=\"9\" onClick={handleClick} type=\"button\" className=\"btn btn-light\">9</button>\n              <button value=\"4\" onClick={handleClick} type=\"button\" className=\"btn btn-light\">4</button>\n              <button value=\"5\" onClick={handleClick} type=\"button\" className=\"btn btn-light\">5</button>\n              <button value=\"6\" onClick={handleClick} type=\"button\" className=\"btn btn-light\">6</button>\n              <button value=\"1\" onClick={handleClick} type=\"button\" className=\"btn btn-light\">1</button>\n              <button value=\"2\" onClick={handleClick} type=\"button\" className=\"btn btn-light\">2</button>\n              <button value=\"3\" onClick={handleClick} type=\"button\" className=\"btn btn-light\">3</button>\n              <button value=\"0\" onClick={handleClick} type=\"button\" className=\"btn btn-light\">0</button>\n              <button value=\".\" onClick={handleClick} type=\"button\" className=\"btn btn-light\">.</button>\n              \n              <button  id=\"clear\" onClick={clear} type=\"button\" className=\"btn btn-danger btn-sm\">AC</button>\n              <button id=\"result\" onClick={calculate} type=\"button\" className=\"equal operator btn btn-primary\">=</button>\n           </div>\n      </div>\n    );\n  }\n  export default Calculator;\n","import React from \"react\";//import vars of hook\nimport \"./App.css\";//import css\nimport Calculator from \"./Components/Calculator\";\n\nfunction App() {//function Principal\n  \n  return ( /*return this value*/\n    <div className=\"calculator-app\"> {/* div principal*/}\n      <Calculator/>\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}